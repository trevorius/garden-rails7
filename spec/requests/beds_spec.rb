require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/beds", type: :request do

  # This should return the minimal set of attributes required to create a valid
  # Bed. As you add validations to Bed, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    # skip("Add a hash of attributes valid for your model")
    {
      name: "bed1",
      bed_type: "ground",
      last_watered: DateTime.now,
    }
  }

  let(:invalid_attributes) {
    # skip("Add a hash of attributes invalid for your model")
    {
      nametesting: nil,
      bed_typetesting: nil,
      last_wateredtesting: nil,
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Bed.create! valid_attributes
      get beds_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      bed = Bed.create! valid_attributes
      get bed_url(bed)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_bed_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      bed = Bed.create! valid_attributes
      get edit_bed_url(bed)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Bed" do
        expect {
          post beds_url, params: { bed: valid_attributes }
        }.to change(Bed, :count).by(1)
      end

      it "redirects to the created bed" do
        post beds_url, params: { bed: valid_attributes }
        expect(response).to redirect_to(bed_url(Bed.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Bed" do
        expect {
          post beds_url, params: { bed: invalid_attributes }
        }.to change(Bed, :count).by(0)
      end

      it "renders an unssuccessful response (i.e. Unprocessable Entity)" do
        post beds_url, params: { bed: invalid_attributes }
        expect(response.status).to eq(422)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      before do
        @name = "updated bed"
        @bed_type = "updated bed type"
      end
      let(:new_attributes) {
        # skip("Add a hash of attributes valid for your model")
        {
          name: @name,
          bed_type: @bed_type,
          last_watered: DateTime.now,
        }
      }

      it "updates the requested bed" do
        bed = Bed.create! valid_attributes
        patch bed_url(bed), params: { bed: new_attributes }
        bed.reload
        expect(bed.name).to eq(@name)
        expect(bed.bed_type).to eq(@bed_type)

      end

      it "redirects to the bed" do
        bed = Bed.create! valid_attributes
        patch bed_url(bed), params: { bed: new_attributes }
        bed.reload
        expect(response).to redirect_to(bed_url(bed))
      end
    end

    context "with invalid parameters" do
      before do
        bed = Bed.create! valid_attributes
        @tmp_bed = Bed.new({
                            id:bed.id,
                            name: bed.name,
                            bed_type: bed.bed_type,
                            last_watered: bed.last_watered,
                            created_at: bed.created_at,
                            updated_at: bed.updated_at,
                          })

        @bed_count = Bed.count
        patch bed_url(bed), params: { bed: invalid_attributes }
      end
      it "renders a unsuccessful response (i.e. Redirect)" do
        expect(response.status).to eq(302)
      end
      it 'doesnt create a new bed' do
        expect(Bed.count).to eq(@bed_count)
      end
      it 'doesnt update the bed' do
        expect(Bed.last).to eq(@tmp_bed)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested bed" do
      bed = Bed.create! valid_attributes
      expect {
        delete bed_url(bed)
      }.to change(Bed, :count).by(-1)
    end

    it "redirects to the beds list" do
      bed = Bed.create! valid_attributes
      delete bed_url(bed)
      expect(response).to redirect_to(beds_url)
    end
  end
end
